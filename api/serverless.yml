service: anonymous-sender
frameworkVersion: "3"
provider:
  name: aws
  runtime: nodejs16.x
  stage: sd-dev
  region: ap-south-1
  architecture: x86_64
  versionFunctions: false
  endpointType: REGIONAL

functions:
  getMessages:
    description: "Returns all messages received for a particular user"
    handler: ./routes/messages/GET/index.handler
    tags:
      API PATH: GET /messages
    events:
      - httpApi:
          path: /messages
          method: get
  postMessages:
    description: "Add a message for a particular user"
    handler: ./routes/messages/POST/index.handler
    tags:
      API PATH: POST /messages
    events:
      - httpApi:
          path: /messages
          method: post
  getUsers:
    description: "Returns data for a particular user"
    handler: ./routes/users/GET/index.handler
    tags:
      API PATH: GET /users/:userId
    events:
      - httpApi:
          path: /users/{userId}
          method: get
  postUsersRegister:
    description: "Handles registration of new users"
    handler: ./routes/users/register/POST/index.handler
    tags:
      API PATH: POST /users/register
    events:
      - httpApi:
          path: /users/register
          method: post
  postUsersLogin:
    description: "Handles user login"
    handler: ./routes/users/login/POST/index.handler
    tags:
      API PATH: POST /users/login
    events:
      - httpApi:
          path: /users/login
          method: post
  getUsersRefresh:
    description: "Refreshes user authentication token"
    handler: ./routes/users/refresh/GET/index.handler
    tags:
      API PATH: GET /users/refresh
    events:
      - httpApi:
          path: /users/refresh
          method: get
  getUsersLogout:
    description: "Handles user logout"
    handler: ./routes/users/logout/GET/index.handler
    tags:
      API PATH: GET /users/logout
    events:
      - httpApi:
          path: /users/logout
          method: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
